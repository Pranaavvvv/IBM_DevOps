pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'library-management-system'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        LOCAL_PORT = '8080'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building Java application with Maven...'
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running unit tests...'
                sh 'mvn test'
                
                // Publish test results
                publishTestResults testResultsPattern: '**/target/surefire-reports/*.xml'
            }
            post {
                always {
                    // Publish test reports
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target/surefire-reports',
                        reportFiles: 'index.html',
                        reportName: 'Test Report'
                    ])
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'Packaging application...'
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }
        
        stage('Stop Previous Container') {
            steps {
                echo 'Stopping previous container...'
                sh '''
                    docker stop library-app || true
                    docker rm library-app || true
                '''
            }
        }
        
        stage('Deploy Locally') {
            steps {
                echo 'Deploying application locally...'
                sh '''
                    docker run -d --name library-app -p ${LOCAL_PORT}:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}
                    echo "Application deployed to http://localhost:${LOCAL_PORT}"
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'Performing health check...'
                script {
                    // Wait for application to start
                    sleep(30)
                    
                    // Check if container is running
                    sh '''
                        if docker ps | grep library-app; then
                            echo "Container is running successfully"
                        else
                            echo "Container failed to start"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('Start Monitoring') {
            steps {
                echo 'Starting monitoring stack...'
                dir('monitoring') {
                    sh 'docker-compose up -d'
                }
                echo 'Monitoring stack started:'
                echo '- Grafana: http://localhost:3000 (admin/admin)'
                echo '- Graphite: http://localhost:8080'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            echo 'Application is running at: http://localhost:8080'
            echo 'Grafana dashboard: http://localhost:3000'
            echo 'Graphite metrics: http://localhost:8080'
        }
        failure {
            echo 'Pipeline failed!'
            echo 'Check the logs above for details.'
        }
    }
} 